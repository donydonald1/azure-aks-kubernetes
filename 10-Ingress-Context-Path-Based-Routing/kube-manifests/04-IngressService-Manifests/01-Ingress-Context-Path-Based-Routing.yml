apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress-cpr
spec:  
  rules:
  - http:
      paths:
      - path: /app1/
        pathType: Prefix
        backend:
          service:
            name: app1-nginx-clusterip-service
            port: 
              number: 80
      - path: /app2/
        pathType: Prefix
        backend:
          service:
            name: app2-nginx-clusterip-service
            port: 
              number: 80          
      - path: /
        pathType: Prefix
        backend:
          service:
            name: usermgmt-webapp-service
            port: 
              number: 80          

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ebs-managed-disk-pvc
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: managed-premium
  resources:
    requests:
      storage: 5Gi 

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: usermanagement-dbcreation-script
data: 
  mysql_usermgmt.sql: |-
    DROP DATABASE IF EXISTS webappdb;
    CREATE DATABASE webappdb; 

---

# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: mysql
#   labels:
#     app: mysql
# spec: 
#   replicas: 1
#   selector:
#     matchLabels:
#       app: mysql
#   strategy:
#     type: Recreate 
#   template: 
#     metadata: 
#       labels: 
#         app: mysql
#     spec: 
#       containers:
#         - name: mysql
#           image: mysql:5.6
#           env:
#             - name: MYSQL_ROOT_PASSWORD
#               value: dbpassword11
#           ports:
#             - containerPort: 3306
#               name: mysql    
#           volumeMounts:
#             - name: mysql-persistent-storage
#               mountPath: /var/lib/mysql    
#             - name: usermanagement-dbcreation-script
#               mountPath: /docker-entrypoint-initdb.d #https://hub.docker.com/_/mysql Refer Initializing a fresh instance                                            
#       volumes: 
#         - name: mysql-persistent-storage
#           persistentVolumeClaim:
#             claimName: ebs-managed-disk-pvc
#         - name: usermanagement-dbcreation-script
#           configMap:
#             name: usermanagement-dbcreation-script

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec: 
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate 
  template: 
    metadata: 
      labels: 
        app: mysql
    spec: 
      containers:
        - name: mysql
          image: mysql:5.6
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom: 
                secretKeyRef:
                  name: mysql-db-password
                  key: db-password
          ports:
            - containerPort: 3306
              name: mysql    
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql    
            - name: usermanagement-dbcreation-script
              mountPath: /docker-entrypoint-initdb.d #https://hub.docker.com/_/mysql Refer Initializing a fresh instance                                            
      volumes: 
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: ebs-managed-disk-pvc
        - name: usermanagement-dbcreation-script
          configMap:
            name: usermanagement-dbcreation-script
---

apiVersion: apps/v1
kind: Deployment
metadata: 
  name: usermgmt-webapp
  labels: 
    app: usermgmt-webapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: usermgmt-webapp
  template:
    metadata:
      labels:
        app: usermgmt-webapp
    spec:
      initContainers:
        - name:  init-db
          image:  busybox:1.31
          command:  ['sh', '-c', 'echo -e "checking for availabiliy of MYSQL Server Deployment"; while ! nc -z mysql 3306; do sleep 1; printf "-"; done; echo -e " >> MySQL DB Server has started";' ]
      containers:
        - image:  dondonald1/kube-usermgmt:MYSQLDB-webapp.1.0
          name:  usermgmt-webapp
          imagePullPolicy: Always
          ports:
          - containerPort: 8080
          env:
            - name: DB_HOSTNAME
              value: "mysql"
            - name: DB_PORT
              value: "3306"
            - name: DB_NAME
              value: "webappdb"
            - name:  DB_USERNAME
              value: "root"
            - name: DB_PASSWORD
              # value: "dbpassword11"
              valueFrom: 
                secretKeyRef:
                  name: mysql-db-password
                  key: db-password

---

apiVersion: v1
kind: Service
metadata:
  name:  usermgmt-webapp-service
  labels:
    app: usermgmt-webapp
spec:
  selector:
    app:  usermgmt-webapp
  type:  ClusterIP
  ports:
  - port: 80
    targetPort: 8080
---

apiVersion: v1
kind: Service
metadata: 
  name: mysql
  labels:
    app: mysql
spec:
  selector:
    app: mysql 
  ports: 
    - port: 3306  
  clusterIP: None # This means we are going to use Pod IP    %     

---

apiVersion: v1
kind: Secret
metadata:
  name: mysql-db-password
type: Opaque
data:
  db-password: ZGJwYXNzd29yZDEx